#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass article
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize a4paper
\paperpackage widemarginsa4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

LISP-ON-LINES
\layout Author


\noun on 
Drew Crapmsie
\noun default 
, 
\noun on 
José Pablo Ezequiel 
\begin_inset Quotes eld
\end_inset 

Pupeno
\begin_inset Quotes erd
\end_inset 

 Fernández Silva
\layout Abstract


\noun on 
Lisp-On-Lines
\noun default 
 is a very useful module that works on top of the 
\noun on 
UnCommon Web
\noun default 
 framework to do rapid developing of complex data-driven web appilcations
 (on 
\noun on 
Common Lisp
\noun default 
, of course).
\layout Section

Introduction
\layout Standard


\noun on 
Lisp-On-Lines
\noun default 
 was founded and developed and continues to be developed and mantained by
 
\noun on 
Drew Crapmsie
\noun default 
.
\layout Subsection

Conventions
\layout Standard

The conventions used in this manual are:
\layout Itemize

Lisp code is shown as a monospace font.
 It is assumed that the user is working in an interactive environment and
 what the user should type appears as bold, for example:
\begin_deeper 
\layout LyX-Code

> 
\series bold 
(+ 5 10)
\layout LyX-Code

15
\end_deeper 
\layout Itemize

Names of people or products are show as small caps, like 
\noun on 
Drew Crapmsie
\noun default 
 or 
\noun on 
Lisp-On-Lines
\noun default 
.
\layout Itemize

Sections marked with 
\color red
ToDo
\color default
 require further revision.
\layout Standard


\color red
ToDo: Add more conventions as they are needed, possible classes of text:
 names of concepts, name of programming entities, like variables, functions,
 etc (which are embedded in text, should they be shown monospaced ?).
\layout Section

Components
\layout Description

Meta\SpecialChar ~
Model\SpecialChar ~
Protocol A Protocol for introspection on relational objects.
\layout Description

Mewa\SpecialChar ~
Presentations A Mewa-like
\begin_inset Foot
collapsed true

\layout Standard

http://www.adrian-lienhard.ch/files/mewa.pdf
\end_inset 

 layer for UncommonWeb
\begin_inset Foot
collapsed true

\layout Standard

http://common-lisp.net/project/ucw/
\end_inset 

 Presentations.
\layout Section

Example
\layout Standard

First we start with the data model.
 The Meta Model Protocol (MMP) is used to provide information on the data
 objects and how they relate to one another.
 Its is currently implemented as a layer over CLSQL
\begin_inset Foot
collapsed true

\layout Standard

http://clsql.b9.com/
\end_inset 

, although support is planned for other backends (
\noun on 
CLOS
\noun default 
, 
\noun on 
Elephant
\noun default 
[4], whatever).
\layout Standard

The MMP shares its definition syntax with 
\emph on 
\noun on 
CLSQL
\emph default 
\noun default 
's Object Oriented Data Definition Language (OODDL)
\begin_inset Foot
collapsed true

\layout Standard

http://clsql.b9.com/manual/ref-ooddl.html
\begin_inset Note
collapsed true

\layout Standard

Shouldn't this footnote be a bibliographical entry ? or something like that
 ?
\end_inset 


\end_inset 

.
 The macro to define view-classes is named DEF-VIEW-CLASS/META, and takes
 the same arguments as DEF-VIEW-CLASS from CLSQL.
 For the purposes of this simple example, we will only need two functions
 from the MMP beyond what CLSQL provides : LIST-SLOTS and LIST-SLOT-TYPES[5].
\layout Standard

We'll define a simple class to hold a user.
\layout LyX-Code

> 
\series bold 
(def-view-class/meta user () 
\layout LyX-Code


\series bold 
   ((userid :initarg :userid :accessor userid :type integer :db-kind :key)
\layout LyX-Code


\series bold 
    (username :initarg :username :accessor username :type string :db-kind
 :base)
\layout LyX-Code


\series bold 
    (password :initarg :password :accessor password :type string :db-kind
 :base)))
\layout Standard

and now we create a user:
\layout LyX-Code

> 
\series bold 
(defparameter user (make-instance 'user :userid 1 
\layout LyX-Code


\series bold 
                                          :username "drewc"
\layout LyX-Code


\series bold 
                                          :password "p@ssw0rd"))
\layout Standard

We can see the slots of users running:
\layout LyX-Code

> 
\series bold 
(lisp-on-lines::list-slots user)
\layout LyX-Code

(USERID USERNAME PASSWORD)
\layout Standard

or the types with:
\layout LyX-Code

> 
\series bold 
(lisp-on-lines::list-slot-types user)
\layout LyX-Code

((USERID INTEGER) (USERNAME STRING) (PASSWORD STRING))
\layout Standard

We can run:
\layout LyX-Code

> 
\series bold 
(lisp-on-lines::default-attributes user)
\layout LyX-Code

((USERID INTEGER :LABEL "USERID" :SLOT-NAME USERID)
\layout LyX-Code

 (USERNAME STRING :LABEL "USERNAME" :SLOT-NAME USERNAME)
\layout LyX-Code

 (PASSWORD STRING :LABEL "PASSWORD" :SLOT-NAME PASSWORD))
\layout Standard

What does this do ?
\layout LyX-Code

> 
\series bold 
(set-default-attributes user)
\layout LyX-Code

((USERID INTEGER :LABEL "USERID" :SLOT-NAME USERID)
\layout LyX-Code

 (USERNAME STRING :LABEL "USERNAME" :SLOT-NAME USERNAME)
\layout LyX-Code

 (PASSWORD STRING :LABEL "PASSWORD" :SLOT-NAME PASSWORD))
\layout Standard

Class attributes?
\layout LyX-Code

> 
\series bold 
(lisp-on-lines::find-class-attributes user)
\layout LyX-Code

(USER (PASSWORD STRING :LABEL "PASSWORD" :SLOT-NAME PASSWORD)
\layout LyX-Code

      (USERNAME STRING :LABEL "USERNAME" :SLOT-NAME USERNAME)
\layout LyX-Code

      (USERID INTEGER :LABEL "USERID" :SLOT-NAME USERID)
\layout LyX-Code

      NIL)
\layout Standard

note that the mewa functions (find-attribute, set-attribute etc) can take
 either an instance, or a class-name as a symbol:
\layout LyX-Code

> 
\series bold 
(lisp-on-lines::find-class-attributes 'user)
\layout LyX-Code

(USER (PASSWORD STRING :LABEL "PASSWORD" :SLOT-NAME PASSWORD)
\layout LyX-Code

      (USERNAME STRING :LABEL "USERNAME" :SLOT-NAME USERNAME)
\layout LyX-Code

      (USERID INTEGER :LABEL "USERID" :SLOT-NAME USERID)
\layout LyX-Code

      NIL)
\layout LyX-Code

> 
\series bold 
(lisp-on-lines::find-class-attributes (make-instance 'user))
\layout LyX-Code

(USER (PASSWORD STRING :LABEL "PASSWORD" :SLOT-NAME PASSWORD)
\layout LyX-Code

      (USERNAME STRING :LABEL "USERNAME" :SLOT-NAME USERNAME)
\layout LyX-Code

      (USERID INTEGER :LABEL "USERID" :SLOT-NAME USERID)
\layout LyX-Code

      NIL)
\layout Standard

Using that information, we have enough to create an interface to the object.
 
\noun on 
UnCommon Web
\noun default 
 includes a powerful presentation system
\begin_inset Foot
collapsed true

\layout Standard

To see this system in action, we strongly recomend to study the presentations
 example which comes with 
\noun on 
UnCommon Web
\noun default 
.
 Reading components/presentations.lisp can help understand a lot about how
 presentations are built.
\end_inset 

, but it is not dynamic enough for some of the most advanced applications.
 Mewa defines an approach to presentations that solves that problem, but
 the paper is written from a 
\noun on 
Smalltalk
\noun default 
 point of view.
 A mixture of the two , Mewa Presentations(MP), is described here.
\layout Standard

MP introduces to 
\noun on 
UnCommon Web
\noun default 
 the concept of 
\emph on 
attributes
\emph default 
.
 An attribute is essentially a named version of the DEFPRESENTATION slot-like
 arguments, for example in :
\layout LyX-Code

> 
\series bold 
(defpresentation person-editor (object-presentation)
\layout LyX-Code


\series bold 
   ((string :label "First Name" :slot-name 'first-name :max-length 30)))
\layout Standard

the (string :label "First Name" ...) form is an attribute definiton.
 Attributes are accessed through FIND-ATTIRIBUTES, and are composed at run
 time (where the 
\noun on 
UnCommon Web
\noun default 
's presentation system is done at compile time) to display the object.
 This allows a very flexible system of displaying objects which is reminiscent
 of 
\noun on 
CSS
\noun default 

\begin_inset Foot
collapsed true

\layout Standard


\noun on 
Drew Crapmsie
\noun default 
 discovered this, rather than invent or design it, so there are some rough
 edges, but its a good start.
\end_inset 

.
\layout Standard

Its much easier to show this than to tell.
 Lets present our user class.
 Currently in 
\noun on 
UnCommon Web
\noun default 
, you'd define a presentation as such :
\layout LyX-Code

> 
\series bold 
(defpresentation user-presentation (object-presentation)
\layout LyX-Code

((INTEGER :LABEL "USERID" :SLOT-NAME USERID)
\layout LyX-Code

 (STRING :LABEL "USERNAME" :SLOT-NAME USERNAME)
\layout LyX-Code

 (STRING :LABEL "PASSWORD" :SLOT-NAME PASSWORD)))
\layout Standard

which could be presented using PRESENT-OBJECT :
\layout LyX-Code

> 
\series bold 
(present-object user :using 'user-presentation)
\layout Standard

The equivalent approach using mewa presentations is actually longer and
 more verbose(!) but it serves to demonstrate how the MP system works.
\layout Standard

Mewa Presentations adds a set of attributes to a class, keyed off the class
 name.
 Attributes are inherited, so if you define an attribute on T, you can use
 it with any class.
\layout Standard

MP stores named attributes keyed on a class name.
 To achieve the same functionality as the above using mp would look like
 this :
\layout LyX-Code

> 
\series bold 
(setf (lisp-on-lines::find-attribute 'user :viewer)
\begin_inset Marginal
collapsed true

\layout Standard

Isn't this too imperative (in contrast to functional, lispy).
\end_inset 


\layout LyX-Code


\series bold 
        '(mewa-object-presentation :attributes (userid username password)
\layout LyX-Code


\series bold 
                                   :global-properties (:editablep nil)))
\layout LyX-Code

(:VIEWER MEWA-OBJECT-PRESENTATION
\layout LyX-Code

         :ATTRIBUTES
\layout LyX-Code

         (USERID USERNAME PASSWORD)
\layout LyX-Code

         :GLOBAL-PROPERTIES
\layout LyX-Code

         (:EDITABLEP NIL))
\layout LyX-Code

> 
\series bold 
(setf (lisp-on-lines::find-attribute 'user 'userid)
\begin_inset Marginal
collapsed false

\layout Standard

Are this setfs to 'userid, 'username and 'password needed ? I (Pupeno) inspected
 they contents at of this moment and they seem to already contain what they
 are being set to.
\end_inset 


\layout LyX-Code


\series bold 
        '(integer :label "userid" :slot-name userid))
\layout LyX-Code

(USERID INTEGER :LABEL "USERID" :SLOT-NAME USERID)
\layout LyX-Code

> 
\series bold 
(setf (find-attribute 'user 'username)
\layout LyX-Code


\series bold 
        '(STRING :LABEL "USERNAME" :SLOT-NAME USERNAME))
\layout LyX-Code

(USERNAME STRING :LABEL "USERNAME" :SLOT-NAME USERNAME)
\layout LyX-Code

> 
\series bold 
(setf (find-attribute 'user 'password)
\layout LyX-Code


\series bold 
        '(STRING :LABEL "USERNAME" :SLOT-NAME PASSWORD))
\layout LyX-Code

(PASSWORD STRING :LABEL "USERNAME" :SLOT-NAME PASSWORD)
\layout LyX-Code

> 
\series bold 
(find-class-attributes 'user)
\layout LyX-Code

(USER
\layout LyX-Code

 (:VIEWER MEWA-OBJECT-PRESENTATION
\layout LyX-Code

          :ATTRIBUTES
\layout LyX-Code

          (USERID USERNAME PASSWORD)
\layout LyX-Code

          :GLOBAL-PROPERTIES
\layout LyX-Code

          (:EDITABLEP NIL))
\layout LyX-Code

 (PASSWORD STRING :LABEL "PASSWORD" :SLOT-NAME PASSWORD)
\layout LyX-Code

 (USERNAME STRING :LABEL "USERNAME" :SLOT-NAME USERNAME)
\layout LyX-Code

 (USERID INTEGER :LABEL "USERID" :SLOT-NAME USERID)
\layout LyX-Code

 NIL)
\layout Standard

this is all turned into a UCW presentation at runtime using MAKE-PRESENTATION
 :
\layout Standard

(defmethod render-on ((res response) (e presentations-index))
\layout Standard

"
\layout Standard

As you'll see, nothing is exported from the LISP-ON-LINES package.
 
\layout Standard

if you wish to use LOL in your own package (or in UCW-USER or whatever),
\layout Standard

you simply need to use the MEWA and META-MODEL packages" 
\layout Standard

(<ucw:render-component :component (lisp-on-lines::make-presentation lisp-on-line
s::user :type :viewer)))
\layout Standard

SET-ATTRIBUTE can be used in place of (setf (find-attribute)) when you want
 to "inherit" the properties of an existing attribute definition :
\layout Standard

LISP-ON-LINES> (set-attribute 'user 'password '(string :label "password:
 (must be at leat 8 chars)"))
\layout Standard

(PASSWORD STRING
\layout Standard

:LABEL
\layout Standard

"password: (must be at leat 8 chars)"
\layout Standard

:SLOT-NAME
\layout Standard

PASSWORD)
\layout Standard

Now we want to create a presentation with which to edit the username.
 we will use the existing attributes on a subclass of mewa-object-presetation
 :
\layout Standard

LISP-ON-LINES> (defcomponent user-editor (mewa-object-presentation)
\layout Standard

()
\layout Standard

(:default-initargs 
\layout Standard

:attributes '((username :label "Enter your New Username") password)
\layout Standard

:global-properties '(:editablep t)))
\layout Standard

USER-EDITOR
\layout Standard

LISP-ON-LINES> (setf (find-attribute 'user :editor) '(user-editor))
\layout Standard

(:EDITOR USER-EDITOR)
\layout Standard

LISP-ON-LINES> 
\layout Standard

which we then can display below our earlier example :
\layout Standard

(defmethod render-on ((res response) (e presentations-index))
\layout Standard

"
\layout Standard

As you'll see, nothing is exported from the LISP-ON-LINES package.
 
\layout Standard

if you wish to use LOL in your own package (or in UCW-USER or whatever),
\layout Standard

you simply need to use the MEWA and META-MODEL packages" 
\layout Standard

(<ucw:render-component :component (lisp-on-lines::make-presentation lisp-on-line
s::user :type :viewer))
\layout Standard

(<ucw:render-component :component (lisp-on-lines::make-presentation lisp-on-line
s::user :type :editor)))
\layout Standard

that should give you some idea on how it works ..
 ask me when you get confused :)
\the_end
